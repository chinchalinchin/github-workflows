name: Terraform Release

# https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
on: 
  workflow_call:
    inputs: 
      MODULES:
        type: string
        required: true
        description: Comma separated list of Terraform modules that will be deployed. Modules will be deployed in the order in which they are passed.
    # see: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callsecrets
    secrets:
      AWS_IAM_USER:
        required: true
        description: IAM username of the AWS service account
      AWS_ACCESS_KEY_ID:
        required: true
        description: Access key ID of the AWS service account
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: Secret access key of the AWS service account
      AWS_DEFAULT_REGION:
        required: true
        description: Default region of the AWS service account
      TF_ENV:
        required: false
        description: JSON with key-value pairs for TF_VAR environment variables.
        
jobs:

  release:
    name: terraform release
    runs-on: ubuntu-latest
    env:
      # see:
        # {{ secrets }} context: https://docs.github.com/en/actions/learn-github-actions/contexts#secrets-context
        # {{ github }} context: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
        # {{ inputs }} context: https://docs.github.com/en/actions/learn-github-actions/contexts#inputs-context
      AWS_IAM_USER: ${{ secrets.AWS_IAM_USER }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      MODULES: ${{ inputs.MODULES }}
      TF_ENV: ${{ secrets.TF_ENV }}
      TERRAFORM_STATE_KEY: ${{ github.repository }}/${{ github.ref_name }}/terraform.tfstate
      TERRAFORM_VERSION: 1.3.0

    steps:
      - name: system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
      # see: 
        # GITHUB_ENV: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
        # TF_PLUGIN_CACHE_DIR: https://www.terraform.io/cli/config/config-file#provider-plugin-cache
        # TF_ENV unpacking: https://stackoverflow.com/questions/48512914/exporting-json-to-environment-variables
      - name: environment
        run: |
          echo "PATH=$(pwd)/bin:$PATH" >> $GITHUB_ENV
          echo "TF_PLUGIN_CACHE_DIR=$(pwd)/plugins" >> $GITHUB_ENV
          for s in $(echo $TF_ENV | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo "$s" >> $GITHUB_ENV
          done

      # see: https://github.com/actions/checkout
      - name: checkout
        uses: actions/checkout@v2

      # see: https://github.com/actions/cache
      # NOTE: cache is keyed around `provider.tf` file. See README for more information.
      - name: terraform cache
        id: cache_terraform
        uses: actions/cache@v3
        with:
          path: bin/terraform
          key: ${{ github.repository }}-${{ hashFiles('provider.tf')}}-tf

      - name: plugin cache
        id: cache_terraform_plugins
        uses: actions/cache@v3
        with:
          path: plugins
          # TODO: invalidating cache, remove `invalid` after testing...
          key: ${{ github.repository }}-${{ hashFiles('provider.tf')}}-tf-plugins-invalid

      # NOTE: manual install to make caching easier
      - name: job dependencies
        if: steps.cache_terraform.outputs.cache-hit != 'true'
        run: |
          wget \
            -O tf.zip \
            https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          unzip tf.zip
          if [ ! -d "bin" ]; then
            mkdir bin
          fi
          mv terraform bin/

      - name: plugins
        if: steps.cache_terraform_plugins.cache-hit != 'true'
        run: |
          if [ ! -d "plugins" ]; then
            mkdir plugins
          fi 
          echo "Using $TERRAFORM_STATE_KEY to initialize Terraform..."
          terraform init \
            -input=false \
            -backend-config="key=${TERRAFORM_STATE_KEY}"

      - name: plan 
        run: |
          IFS=', ' read -r -a M_ARRAY <<< "$MODULES"
          for element in "${M_ARRAY[@]}"
          do
            echo "Planning $element module"
            terraform plan \
              -var-file .tfvars \
              -target="module.${element}" \
              -input=false 
          done
            
      # - name: apply
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     IFS=', ' read -r -a M_ARRAY <<< "$MODULES"
      #     for element in "${M_ARRAY[@]}"
      #     do
      #       echo "Deploying $element module"
      #       terraform apply \
      #         -var-file .tfvars \
      #         -input=false \
      #         -target="module.${element}" \
      #         -auto-approve 
      #     done
      
      # - name: destroy
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     IFS=', ' read -r -a M_ARRAY <<< "$MODULES"
      #     for element in "${M_ARRAY[@]}"
      #     do
      #       echo "Destroying $element module"
      #       terraform destroy \
      #         -var-file .tfvars \
      #         -input=false \
      #         -target="module.${element}" \
      #         -auto-approve
      #     done